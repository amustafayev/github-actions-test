name: Testing comments

on: 
  pull_request:
    types: [opened,edited,synchronize]

jobs:
  welcome:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            console.log(context)
            if(context.payload.pull_request.changed_files < 4){
                await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'There is not enough file to create pr'
              })
              
              core.setFailed('Failed!')
            } 
            
               

# https://github.com/actions/github-script#comment-on-an-issue

# https://github.com/actions/github-script/blob/main/.github/workflows/pull-request-test.yml

# https://github.com/marketplace/actions/github-script

# https://octokit.github.io/rest.js/v18#pulls-get-review-comment



# name: PR Scripts

# on:
#   pull_request:
#     types:
#       - opened
#       - edited
#       - synchronize
# jobs:
#   comment:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v5
#         with:
#           script: |
#             github.rest.pulls.createReviewComment({
#                   owner: context.repo.owner,
#                   repo: context.repo.repo,
#                   body: 'Title is empty',
#                   pull_number: context.pull_request.number
#                 });
#                 console.log(context)
#                 core.setFailed('Description or title are null!')
           




#  if(context.payload.pull_request.title == "" ){
              
#               github.rest.pulls.createReviewComment({
#                   owner: context.repo.owner,
#                   epo: context.repo.repo,
#                   body: 'Title is empty',
#                   pull_number: context.pull_request.number
#                 });
#               core.setFailed('Description or title are null!')
#             }

#             if(context.payload.pull_request.description == ""){
#                 github.rest.pulls.createReviewComment({
#                   owner: context.repo.owner,
#                   epo: context.repo.repo,
#                   body: 'Descr is empty',
#                   pull_number: context.pull_request.number
#                 });
#             }
#             console.log(context)

#name: Testing

# on:
#   issues:
#     types: [opened]

# jobs:
#   comment:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v5
#         with:
#           script: |
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: 'ðŸ‘‹ Thanks for reporting!'
#             })






# name: Testing

# on:
#   pull_request:
#     types: [opened,edited,synchronize]

# jobs:
#   comment:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/github-script@v5
#         with:
#           script: |
#             console.log(context)
#             console.log(context.payload.pull_request.number) 
#              github.rest.pulls.createReviewComment({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 body: 'Title is empty',
#                 pull_number: context.payload.pull_request.number
#               });





  #  // Get a list of all issues created by the PR opener
  #           // See: https://octokit.github.io/rest.js/#pagination
  #           const creator = context.payload.sender.login
  #           const opts = github.rest.issues.listForRepo.endpoint.merge({
  #             ...context.issue,
  #             creator,
  #             state: 'all'
  #           })
  #           const issues = await github.paginate(opts)

  #           for (const issue of issues) {
  #             if (issue.number === context.issue.number) {
  #               continue
  #             }

  #             if (issue.pull_request) {
  #               return // Creator is already a contributor.
  #             }
  #           }
